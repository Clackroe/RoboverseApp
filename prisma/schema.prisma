generator client {
  provider = "prisma-client-js"
  // engineType = "binary" // may need to uncomment this for Docker
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id        String            @id @default(uuid()) @db.Uuid
  createdAt DateTime          @default(now()) @db.Timestamp(6)
  team_id   String            @db.Uuid
  payload   String
  status    enums_jobs_status
  error     String?
  team      Team              @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_team_id")
}

model TrainedMatch {
  id             String    @id @default(uuid()) @db.Uuid
  team1Id        String    @db.Uuid
  team1ModelId   String    @db.Uuid
  team2Id        String    @db.Uuid
  team2ModelId   String    @db.Uuid
  type           String    @db.VarChar(255)
  timestamp      DateTime? @db.Timestamp(6)
  team1Score     Int?
  team2Score     Int?
  winningTeamId  String?   @db.Uuid
  winningModelId String?   @db.Uuid
  losingTeamId   String?   @db.Uuid
  losingModelId  String?   @db.Uuid
  team1          Team      @relation("match_team1ToTeam", fields: [team1Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team1Model     Model     @relation("match_team1ModelToModel", fields: [team1ModelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team2          Team      @relation("match_team2ToTeam", fields: [team2Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team2Model     Model     @relation("match_team2ModelToModel", fields: [team2ModelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  losingModel    Model?    @relation("match_losingModelToModel", fields: [losingModelId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "match_loser_model_fkey")
  losingTeam     Team?     @relation("match_losingTeamToTeam", fields: [losingTeamId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "match_loser_team_fkey")
  winningModel   Model?    @relation("match_winningModelToModel", fields: [winningModelId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "match_winner_model_fkey")
  winningTeam    Team?     @relation("match_winningTeamToTeam", fields: [winningTeamId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "match_winner_team_fkey")
}

model EquationMatch {
  id                String    @id @default(uuid()) @db.Uuid
  team1Id           String    @db.Uuid
  team1EquationId   String    @db.Uuid
  team2Id           String    @db.Uuid
  team2EquationId   String    @db.Uuid
  type              String    @db.VarChar(255)
  timestamp         DateTime? @db.Timestamp(6)
  team1Score        Int?
  team2Score        Int?
  winningTeamId     String?   @db.Uuid
  winningEquationId String?   @db.Uuid
  losingTeamId      String?   @db.Uuid
  losingEquationId  String?   @db.Uuid
  team1Equation     Equation  @relation("equation_match_team1EquationToEquation", fields: [team1EquationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team1             Team      @relation("equation_match_team1ToTeam", fields: [team1Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team2Equation     Equation  @relation("equation_match_team2EquationToEquation", fields: [team2EquationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team2             Team      @relation("equation_match_team2ToTeam", fields: [team2Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  losingEquation    Equation? @relation("equation_match_losingEquationToEquation", fields: [losingEquationId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "equation_match_loser_equation_fkey")
  losingTeam        Team?     @relation("equation_match_losingTeamToTeam", fields: [losingTeamId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "equation_match_loser_team_fkey")
  winningEquation   Equation? @relation("equation_match_winningEquationToEquation", fields: [winningEquationId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "equation_match_winner_equation_fkey")
  winningTeam       Team?     @relation("equation_match_winningTeamToTeam", fields: [winningTeamId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "equation_match_winner_team_fkey")
}

model Model {
  id     String @id @default(uuid()) @db.Uuid
  teamId String @db.Uuid
  name   String @db.VarChar(255)
  url    String @db.VarChar(255)

  team                   Team           @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_model_team_id")
  trainedMatchesAsTeam1  TrainedMatch[] @relation("match_team1ModelToModel")
  trainedMatchesAsTeam2  TrainedMatch[] @relation("match_team2ModelToModel")
  trainedMatchesWithLoss TrainedMatch[] @relation("match_losingModelToModel")
  trainedMatchesWithWin  TrainedMatch[] @relation("match_winningModelToModel")
}

model Team {
  id                      String          @id @default(uuid()) @db.Uuid
  name                    String          @unique @db.VarChar(255)
  Equation                Equation[]
  equationMatchesAsTeam1  EquationMatch[] @relation("equation_match_team1ToTeam")
  equationMatchesAsTeam2  EquationMatch[] @relation("equation_match_team2ToTeam")
  equationMatchesWithLoss EquationMatch[] @relation("equation_match_losingTeamToTeam")
  equationMatchesWithWin  EquationMatch[] @relation("equation_match_winningTeamToTeam")
  jobs                    Job[]
  models                  Model[]
  trainedMatchesAsTeam1   TrainedMatch[]  @relation("match_team1ToTeam")
  trainedMatchesAsTeam2   TrainedMatch[]  @relation("match_team2ToTeam")
  trainedMatchesWithLoss  TrainedMatch[]  @relation("match_losingTeamToTeam")
  trainedMatchesWithWin   TrainedMatch[]  @relation("match_winningTeamToTeam")
  users                   User[]
}

model Equation {
  id              String          @id @default(uuid()) @db.Uuid
  name            String          @db.VarChar(255)
  userId          String?         @db.Uuid
  teamID          String?         @db.Uuid
  createdByUser   User?           @relation(fields: [userId], references: [id])
  Team            Team?           @relation(fields: [teamID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_equation_team_id")
  matchesAsTeam1  EquationMatch[] @relation("equation_match_team1EquationToEquation")
  matchesAsTeam2  EquationMatch[] @relation("equation_match_team2EquationToEquation")
  matchesWithLoss EquationMatch[] @relation("equation_match_losingEquationToEquation")
  matchesWithWin  EquationMatch[] @relation("equation_match_winningEquationToEquation")
}

model token {
  id        String   @id @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamp(6)
  name      String   @unique
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(uuid()) @db.Uuid
  name          String     @unique @db.VarChar(255)
  discord_id    String?    @unique @db.VarChar(255)
  epic_id       String?    @unique @db.VarChar(255)
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  team_id       String?    @db.Uuid
  accounts      Account[]
  equations     Equation[]
  sessions      Session[]
  team          Team?      @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_team_id")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum enums_jobs_status {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
